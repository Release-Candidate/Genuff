{
    "cells": [
        {
            "language": "typescript",
            "source": [
                "import Decimal from \"decimal.js\"\r\n\r\nconst INDEX_NOT_FOUND = -1\r\n\r\n/**\r\n * Constraints for interpolation functions.\r\n */\r\ninterface Interpolation<T> {\r\n    point(t: T): { x: T; y: T }\r\n    f(x: T): T\r\n    f1(x: T): T\r\n    tangent(x: T): { x: T; y: T }\r\n    curvature(x: T): T\r\n    radius(x: T): T\r\n    getPoints(): Array<T[]>\r\n    setF({\r\n        x,\r\n        f,\r\n        f1,\r\n        tangent,\r\n        curvature,\r\n        radius,\r\n    }: {\r\n        x: T\r\n        f: T\r\n        f1?: T\r\n        tangent?: T\r\n        curvature?: T\r\n        radius?: T\r\n    }): void\r\n}\r\n\r\nclass LinearInterpolation implements Interpolation<number> {\r\n    private scratch: Array<number> = []\r\n\r\n    constructor(private arr: Array<[number, number]>) {\r\n        this.arr.sort(([a, _x], [b, _y]) => a - b)\r\n    }\r\n\r\n    findInterval(x: number): [[number, number], [number, number]] {\r\n        const found = this.arr.findIndex(([xS, _f]) => xS >= x)\r\n        if (found === INDEX_NOT_FOUND) {\r\n            return [\r\n                this.arr[this.arr.length - 2],\r\n                this.arr[this.arr.length - 1],\r\n            ]\r\n        } else {\r\n            if (found === 0) {\r\n                return [this.arr[found], this.arr[found + 1]]\r\n            }\r\n            return [this.arr[found - 1], this.arr[found]]\r\n        }\r\n    }\r\n\r\n    point(t: number): { x: number; y: number } {\r\n        return { x: t, y: this.f(t) }\r\n    }\r\n\r\n    f(x: number): number {\r\n        const [[x0, f0], [x1, f1]] = this.findInterval(x)\r\n\r\n        return f0 + ((f0 - f1) * (x0 - x)) / (x1 - x0)\r\n    }\r\n\r\n    f1(x: number): number {\r\n        const fixPoints = this.findInterval(x)\r\n        return (\r\n            (fixPoints[1][1] - fixPoints[0][1]) /\r\n            (fixPoints[1][0] - fixPoints[0][0])\r\n        )\r\n    }\r\n\r\n    tangent(x: number): { x: number; y: number } {\r\n        const fixPoints = this.findInterval(x)\r\n        return {\r\n            y: fixPoints[1][1] - fixPoints[0][1],\r\n            x: fixPoints[1][0] - fixPoints[0][0],\r\n        }\r\n    }\r\n\r\n    curvature(x: number): number {\r\n        // eslint-disable-next-line no-magic-numbers\r\n        return 0\r\n    }\r\n\r\n    radius(x: number): number {\r\n        // eslint-disable-next-line no-magic-numbers\r\n        return NaN\r\n    }\r\n\r\n    /**\r\n     * Return the known points to interpolate as an array of tuples `[x, f(x)]`.\r\n     *\r\n     * @returns The known points to interpolate as an array of tuples `[x, f(x)]`.\r\n     */\r\n    getPoints(): Array<[number, number]> {\r\n        return this.arr\r\n    }\r\n\r\n    setF({ x, f }: { x: number; f: number }): void {\r\n        const found = this.arr.findIndex(([xS, _y]) => xS === x)\r\n        if (found === INDEX_NOT_FOUND) {\r\n            this.arr.push([x, f])\r\n            this.arr.sort(([a, _x], [b, _y]) => a - b)\r\n        } else {\r\n            this.arr[found] = [x, f]\r\n        }\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "class NevilleInterpolation implements Interpolation<number> {\r\n    private scratch: number[] = []\r\n\r\n    constructor(private arr: Array<[number, number]>) {\r\n        this.arr.sort(([a, _x], [b, _y]) => a - b)\r\n        \r\n    }\r\n    point(t: number): { x: number; y: number } {\r\n        return { x: t, y: this.f(t) }\r\n    }\r\n\r\n    f(x: number): number {\r\n        const n = this.arr.length\r\n        for (let i = 0; i < n; i++) {\r\n            //  this.scratch[i] = [...Array(n).keys()]\r\n            this.scratch[i] = this.arr[i][1]\r\n        }\r\n\r\n        for (let i = 0; i < n - 1; i++) {\r\n            for (let k = i + 1; k < n; k++) {\r\n                this.scratch[k - i - 1] =\r\n                    this.scratch[k - i - 1] +\r\n                    ((this.arr[k - i - 1][0] - x) *\r\n                        (this.scratch[k - i - 1] - this.scratch[k - i])) /\r\n                        (this.arr[k][0] - this.arr[k - i - 1][0])\r\n            }\r\n        }\r\n\r\n        return this.scratch[0]\r\n    }\r\n\r\n    f1(x: number): number {\r\n        const fixPoints = this.findInterval(x)\r\n        return (\r\n            (fixPoints[1][1] - fixPoints[0][1]) /\r\n            (fixPoints[1][0] - fixPoints[0][0])\r\n        )\r\n    }\r\n\r\n    tangent(x: number): { x: number; y: number } {\r\n        const fixPoints = this.findInterval(x)\r\n        return {\r\n            y: fixPoints[1][1] - fixPoints[0][1],\r\n            x: fixPoints[1][0] - fixPoints[0][0],\r\n        }\r\n    }\r\n\r\n    curvature(x: number): number {\r\n        // eslint-disable-next-line no-magic-numbers\r\n        return 0\r\n    }\r\n\r\n    radius(x: number): number {\r\n        // eslint-disable-next-line no-magic-numbers\r\n        return NaN\r\n    }\r\n\r\n    /**\r\n     * Return the known points to interpolate as an array of tuples `[x, f(x)]`.\r\n     *\r\n     * @returns The known points to interpolate as an array of tuples `[x, f(x)]`.\r\n     */\r\n    getPoints(): Array<[number, number]> {\r\n        return this.arr\r\n    }\r\n\r\n    setF({ x, f }: { x: number; f: number }): void {\r\n        const found = this.arr.findIndex(([xS, _y]) => xS === x)\r\n        if (found === INDEX_NOT_FOUND) {\r\n            this.arr.push([x, f])\r\n            this.arr.sort(([a, _x], [b, _y]) => a - b)\r\n        } else {\r\n            this.arr[found] = [x, f]\r\n        }\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "class AitkenInterpolation implements Interpolation<number> {\r\n    private scratch: Array<number> = []\r\n\r\n    constructor(private arr: Array<[number, number]>) {\r\n        this.arr.sort(([a, _x], [b, _y]) => a - b)\r\n    }\r\n\r\n    findInterval(x: number): [[number, number], [number, number]] {\r\n        const found = this.arr.findIndex(([xS, _f]) => xS >= x)\r\n        if (found === INDEX_NOT_FOUND) {\r\n            return [\r\n                this.arr[this.arr.length - 2],\r\n                this.arr[this.arr.length - 1],\r\n            ]\r\n        } else {\r\n            if (found === 0) {\r\n                return [this.arr[found], this.arr[found + 1]]\r\n            }\r\n            return [this.arr[found - 1], this.arr[found]]\r\n        }\r\n    }\r\n\r\n    point(t: number): { x: number; y: number } {\r\n        return { x: t, y: this.f(t) }\r\n    }\r\n\r\n    f(x: number): number {\r\n        const n = this.arr.length\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            this.scratch[i] = this.arr[i][1]\r\n        }\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            for (let k = i + 1; k < n; k++) {\r\n                const newV =\r\n                    this.scratch[i] +\r\n                    ((this.arr[i][0] - x) *\r\n                        (this.scratch[i] - this.scratch[k])) /\r\n                        (this.arr[k][0] - this.arr[i][0])\r\n                this.scratch[k] = newV\r\n            }\r\n        }\r\n\r\n        return this.scratch[n - 1]\r\n    }\r\n\r\n    f1(x: number): number {\r\n        const fixPoints = this.findInterval(x)\r\n        return (\r\n            (fixPoints[1][1] - fixPoints[0][1]) /\r\n            (fixPoints[1][0] - fixPoints[0][0])\r\n        )\r\n    }\r\n\r\n    tangent(x: number): { x: number; y: number } {\r\n        const fixPoints = this.findInterval(x)\r\n        return {\r\n            y: fixPoints[1][1] - fixPoints[0][1],\r\n            x: fixPoints[1][0] - fixPoints[0][0],\r\n        }\r\n    }\r\n\r\n    curvature(x: number): number {\r\n        // eslint-disable-next-line no-magic-numbers\r\n        return 0\r\n    }\r\n\r\n    radius(x: number): number {\r\n        // eslint-disable-next-line no-magic-numbers\r\n        return NaN\r\n    }\r\n\r\n    /**\r\n     * Return the known points to interpolate as an array of tuples `[x, f(x)]`.\r\n     *\r\n     * @returns The known points to interpolate as an array of tuples `[x, f(x)]`.\r\n     */\r\n    getPoints(): Array<[number, number]> {\r\n        return this.arr\r\n    }\r\n\r\n    setF({ x, f }: { x: number; f: number }): void {\r\n        const found = this.arr.findIndex(([xS, _y]) => xS === x)\r\n        if (found === INDEX_NOT_FOUND) {\r\n            this.arr.push([x, f])\r\n            this.arr.sort(([a, _x], [b, _y]) => a - b)\r\n        } else {\r\n            this.arr[found] = [x, f]\r\n        }\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "class KroghIInterpolation implements Interpolation<number> {\r\n    private scratch: Array<number> = []\r\n\r\n    constructor(private arr: Array<[number, number]>) {\r\n        this.arr.sort(([a, _x], [b, _y]) => a - b)\r\n    }\r\n\r\n    findInterval(x: number): [[number, number], [number, number]] {\r\n        const found = this.arr.findIndex(([xS, _f]) => xS >= x)\r\n        if (found === INDEX_NOT_FOUND) {\r\n            return [\r\n                this.arr[this.arr.length - 2],\r\n                this.arr[this.arr.length - 1],\r\n            ]\r\n        } else {\r\n            if (found === 0) {\r\n                return [this.arr[found], this.arr[found + 1]]\r\n            }\r\n            return [this.arr[found - 1], this.arr[found]]\r\n        }\r\n    }\r\n\r\n    point(t: number): { x: number; y: number } {\r\n        return { x: t, y: this.f(t) }\r\n    }\r\n\r\n    f(x: number): number {\r\n        const n = this.arr.length\r\n\r\n        this.scratch[0] = this.arr[0][1]\r\n        let r = 1\r\n        let p = this.scratch[0]\r\n\r\n        for (let k = 1; k < n; k++) {\r\n            this.scratch[k] = this.arr[k][1]\r\n            for (let i = 0; i < k; i++) {\r\n                this.scratch[k] =\r\n                    (this.scratch[i] - this.scratch[k]) /\r\n                    (this.arr[i][0] - this.arr[k][0])\r\n            }\r\n            r = (x - this.arr[k - 1][0]) * r\r\n            p = p + r * this.scratch[k]\r\n        }\r\n\r\n        return p\r\n    }\r\n\r\n    f1(x: number): number {\r\n        const fixPoints = this.findInterval(x)\r\n        return (\r\n            (fixPoints[1][1] - fixPoints[0][1]) /\r\n            (fixPoints[1][0] - fixPoints[0][0])\r\n        )\r\n    }\r\n\r\n    tangent(x: number): { x: number; y: number } {\r\n        const fixPoints = this.findInterval(x)\r\n        return {\r\n            y: fixPoints[1][1] - fixPoints[0][1],\r\n            x: fixPoints[1][0] - fixPoints[0][0],\r\n        }\r\n    }\r\n\r\n    curvature(x: number): number {\r\n        // eslint-disable-next-line no-magic-numbers\r\n        return 0\r\n    }\r\n\r\n    radius(x: number): number {\r\n        // eslint-disable-next-line no-magic-numbers\r\n        return NaN\r\n    }\r\n\r\n    /**\r\n     * Return the known points to interpolate as an array of tuples `[x, f(x)]`.\r\n     *\r\n     * @returns The known points to interpolate as an array of tuples `[x, f(x)]`.\r\n     */\r\n    getPoints(): Array<[number, number]> {\r\n        return this.arr\r\n    }\r\n\r\n    setF({ x, f }: { x: number; f: number }): void {\r\n        const found = this.arr.findIndex(([xS, _y]) => xS === x)\r\n        if (found === INDEX_NOT_FOUND) {\r\n            this.arr.push([x, f])\r\n            this.arr.sort(([a, _x], [b, _y]) => a - b)\r\n        } else {\r\n            this.arr[found] = [x, f]\r\n        }\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "class KroghIIInterpolation implements Interpolation<number> {\r\n    private scratch: Array<number> = []\r\n\r\n    constructor(private arr: Array<[number, number]>) {\r\n        this.arr.sort(([a, _x], [b, _y]) => a - b)\r\n    }\r\n\r\n    findInterval(x: number): [[number, number], [number, number]] {\r\n        const found = this.arr.findIndex(([xS, _f]) => xS >= x)\r\n        if (found === INDEX_NOT_FOUND) {\r\n            return [\r\n                this.arr[this.arr.length - 2],\r\n                this.arr[this.arr.length - 1],\r\n            ]\r\n        } else {\r\n            if (found === 0) {\r\n                return [this.arr[found], this.arr[found + 1]]\r\n            }\r\n            return [this.arr[found - 1], this.arr[found]]\r\n        }\r\n    }\r\n\r\n    point(t: number): { x: number; y: number } {\r\n        return { x: t, y: this.f(t) }\r\n    }\r\n\r\n    f(x: number): number {\r\n        const n = this.arr.length\r\n\r\n        this.scratch[0] = this.arr[0][1]\r\n        let r = 1\r\n        let p = this.scratch[0]\r\n\r\n        for (let k = 1; k < n; k++) {\r\n            this.scratch[k] = this.arr[k][1]\r\n            for (let i = 0; i < k; i++) {\r\n                this.scratch[k] =\r\n                    (this.scratch[i] - this.scratch[k]) /\r\n                    (this.arr[i][0] - this.arr[k][0])\r\n            }\r\n        }\r\n        for (let k = n - 1; k > 0; k--) {\r\n            this.scratch[k] =\r\n                this.scratch[k - 1] + (x - this.arr[k - 1][0]) * this.scratch[k]\r\n        }\r\n\r\n        return this.scratch[0]\r\n    }\r\n\r\n    f1(x: number): number {\r\n        const fixPoints = this.findInterval(x)\r\n        return (\r\n            (fixPoints[1][1] - fixPoints[0][1]) /\r\n            (fixPoints[1][0] - fixPoints[0][0])\r\n        )\r\n    }\r\n\r\n    tangent(x: number): { x: number; y: number } {\r\n        const fixPoints = this.findInterval(x)\r\n        return {\r\n            y: fixPoints[1][1] - fixPoints[0][1],\r\n            x: fixPoints[1][0] - fixPoints[0][0],\r\n        }\r\n    }\r\n\r\n    curvature(x: number): number {\r\n        // eslint-disable-next-line no-magic-numbers\r\n        return 0\r\n    }\r\n\r\n    radius(x: number): number {\r\n        // eslint-disable-next-line no-magic-numbers\r\n        return NaN\r\n    }\r\n\r\n    /**\r\n     * Return the known points to interpolate as an array of tuples `[x, f(x)]`.\r\n     *\r\n     * @returns The known points to interpolate as an array of tuples `[x, f(x)]`.\r\n     */\r\n    getPoints(): Array<[number, number]> {\r\n        return this.arr\r\n    }\r\n\r\n    setF({ x, f }: { x: number; f: number }): void {\r\n        const found = this.arr.findIndex(([xS, _y]) => xS === x)\r\n        if (found === INDEX_NOT_FOUND) {\r\n            this.arr.push([x, f])\r\n            this.arr.sort(([a, _x], [b, _y]) => a - b)\r\n        } else {\r\n            this.arr[found] = [x, f]\r\n        }\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "import { Plotly } from \"node-kernel\"\r\n\r\n// 10 + 11x - x^2\r\n\r\nconst points: Array<[number, number]> = [\r\n    [1, 0],\r\n    [10, 0],\r\n    [5.5, 81 / 4],\r\n]\r\n\r\nconst linear = new LinearInterpolation(points)\r\n\r\nconst aitken = new AitkenInterpolation(points)\r\n\r\nconst neville = new NevilleInterpolation(points)\r\n\r\nconst kroghI = new KroghIInterpolation(points)\r\nconst kroghII = new KroghIInterpolation(points)\r\n\r\nconst x = [...Array(24).keys()].map((e) => 0.5 * e)\r\n\r\nconst y = x.map((t) => {\r\n    const fx = linear.f(t)\r\n    //console.log(`${t}: ${fx}`)\r\n    return fx\r\n})\r\nconst yA = x.map((t) => {\r\n    const fx = aitken.f(t)\r\n    //console.log(`${t}: ${fx}`)\r\n    return fx\r\n})\r\nconst yN = x.map((t) => {\r\n    const fx = neville.f(t)\r\n    //console.log(`${t}: ${fx}`)\r\n    return fx\r\n})\r\nconst yKI = x.map((t) => {\r\n    const fx = kroghI.f(t)\r\n    //console.log(`${t}: ${fx}`)\r\n    return fx\r\n})\r\nconst yKII = x.map((t) => {\r\n    const fx = kroghII.f(t)\r\n    //console.log(`${t}: ${fx}`)\r\n    return fx\r\n})\r\n\r\nvar pointsPlot = {\r\n    x: [1, 5.5, 10],\r\n    y: [0, 81 / 4, 0],\r\n    mode: \"markers\",\r\n    type: \"scatter\",\r\n    name: \"fixed Points\",\r\n}\r\n\r\nvar linearPlot = {\r\n    x,\r\n    y,\r\n    type: \"lines\",\r\n    name: \"linear\",\r\n}\r\nvar aitkenPlot = {\r\n    x,\r\n    y: yA,\r\n    type: \"lines\",\r\n    name: \"Aitken\",\r\n}\r\nvar nevillePlot = {\r\n    x,\r\n    y: yN,\r\n    type: \"lines\",\r\n    name: \"Neville\",\r\n}\r\nvar krogIPlot = {\r\n    x,\r\n    y: yKI,\r\n    type: \"lines\",\r\n    name: \"KroghI\",\r\n}\r\nvar krogIIPlot = {\r\n    x,\r\n    y: yKII,\r\n    type: \"lines\",\r\n    name: \"KroghII\",\r\n}\r\nvar realPlot = {\r\n    x,\r\n    y: x.map((e) => -10 + 11 * e - e * e),\r\n    type: \"lines\",\r\n    name: \"Real\",\r\n}\r\n\r\nvar data = [linearPlot, aitkenPlot, pointsPlot, nevillePlot, krogIPlot, krogIIPlot, realPlot]\r\n\r\nvar layout = {\r\n    title: \"Interpolation\",\r\n    showlegend: true,\r\n}\r\n\r\nPlotly.newPlot(\"myDiv\", data, layout, { scrollZoom: true })\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "xdb0769e652684ee582fddba59bf60f6b",
                                "type": "generatePlot",
                                "ele": "myDiv",
                                "data": [
                                    {
                                        "x": [
                                            0,
                                            0.5,
                                            1,
                                            1.5,
                                            2,
                                            2.5,
                                            3,
                                            3.5,
                                            4,
                                            4.5,
                                            5,
                                            5.5,
                                            6,
                                            6.5,
                                            7,
                                            7.5,
                                            8,
                                            8.5,
                                            9,
                                            9.5,
                                            10,
                                            10.5,
                                            11,
                                            11.5
                                        ],
                                        "y": [
                                            -4.5,
                                            -2.25,
                                            0,
                                            2.25,
                                            4.5,
                                            6.75,
                                            9,
                                            11.25,
                                            13.5,
                                            15.75,
                                            18,
                                            20.25,
                                            18,
                                            15.75,
                                            13.5,
                                            11.25,
                                            9,
                                            6.75,
                                            4.5,
                                            2.25,
                                            0,
                                            -2.25,
                                            -4.5,
                                            -6.75
                                        ],
                                        "type": "lines",
                                        "name": "linear"
                                    },
                                    {
                                        "x": [
                                            0,
                                            0.5,
                                            1,
                                            1.5,
                                            2,
                                            2.5,
                                            3,
                                            3.5,
                                            4,
                                            4.5,
                                            5,
                                            5.5,
                                            6,
                                            6.5,
                                            7,
                                            7.5,
                                            8,
                                            8.5,
                                            9,
                                            9.5,
                                            10,
                                            10.5,
                                            11,
                                            11.5
                                        ],
                                        "y": [
                                            -10,
                                            -4.75,
                                            0,
                                            4.25,
                                            8,
                                            11.25,
                                            14,
                                            16.25,
                                            18,
                                            19.25,
                                            20,
                                            20.25,
                                            20,
                                            19.25,
                                            18,
                                            16.25,
                                            14,
                                            11.25,
                                            8,
                                            4.25,
                                            0,
                                            -4.75,
                                            -10,
                                            -15.75
                                        ],
                                        "type": "lines",
                                        "name": "Aitken"
                                    },
                                    {
                                        "x": [
                                            1,
                                            5.5,
                                            10
                                        ],
                                        "y": [
                                            0,
                                            20.25,
                                            0
                                        ],
                                        "mode": "markers",
                                        "type": "scatter",
                                        "name": "fixed Points"
                                    },
                                    {
                                        "x": [
                                            0,
                                            0.5,
                                            1,
                                            1.5,
                                            2,
                                            2.5,
                                            3,
                                            3.5,
                                            4,
                                            4.5,
                                            5,
                                            5.5,
                                            6,
                                            6.5,
                                            7,
                                            7.5,
                                            8,
                                            8.5,
                                            9,
                                            9.5,
                                            10,
                                            10.5,
                                            11,
                                            11.5
                                        ],
                                        "y": [
                                            -10,
                                            -4.75,
                                            0,
                                            4.25,
                                            8,
                                            11.25,
                                            14,
                                            16.25,
                                            18,
                                            19.25,
                                            20,
                                            20.25,
                                            20,
                                            19.25,
                                            18,
                                            16.25,
                                            14,
                                            11.25,
                                            8,
                                            4.25,
                                            0,
                                            -4.75,
                                            -10,
                                            -15.75
                                        ],
                                        "type": "lines",
                                        "name": "Neville"
                                    },
                                    {
                                        "x": [
                                            0,
                                            0.5,
                                            1,
                                            1.5,
                                            2,
                                            2.5,
                                            3,
                                            3.5,
                                            4,
                                            4.5,
                                            5,
                                            5.5,
                                            6,
                                            6.5,
                                            7,
                                            7.5,
                                            8,
                                            8.5,
                                            9,
                                            9.5,
                                            10,
                                            10.5,
                                            11,
                                            11.5
                                        ],
                                        "y": [
                                            -10,
                                            -4.75,
                                            0,
                                            4.25,
                                            8,
                                            11.25,
                                            14,
                                            16.25,
                                            18,
                                            19.25,
                                            20,
                                            20.25,
                                            20,
                                            19.25,
                                            18,
                                            16.25,
                                            14,
                                            11.25,
                                            8,
                                            4.25,
                                            0,
                                            -4.75,
                                            -10,
                                            -15.75
                                        ],
                                        "type": "lines",
                                        "name": "KroghI"
                                    },
                                    {
                                        "x": [
                                            0,
                                            0.5,
                                            1,
                                            1.5,
                                            2,
                                            2.5,
                                            3,
                                            3.5,
                                            4,
                                            4.5,
                                            5,
                                            5.5,
                                            6,
                                            6.5,
                                            7,
                                            7.5,
                                            8,
                                            8.5,
                                            9,
                                            9.5,
                                            10,
                                            10.5,
                                            11,
                                            11.5
                                        ],
                                        "y": [
                                            -10,
                                            -4.75,
                                            0,
                                            4.25,
                                            8,
                                            11.25,
                                            14,
                                            16.25,
                                            18,
                                            19.25,
                                            20,
                                            20.25,
                                            20,
                                            19.25,
                                            18,
                                            16.25,
                                            14,
                                            11.25,
                                            8,
                                            4.25,
                                            0,
                                            -4.75,
                                            -10,
                                            -15.75
                                        ],
                                        "type": "lines",
                                        "name": "KroghII"
                                    }
                                ],
                                "layout": {
                                    "title": "Interpolation",
                                    "showlegend": true
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}