// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Decimal from "../FFI/Decimal.mjs";
import * as Belt_Int from "./../../node_modules/rescript/lib/es6/belt_Int.js";
import * as Caml_obj from "./../../node_modules/rescript/lib/es6/caml_obj.js";
import * as Belt_Float from "./../../node_modules/rescript/lib/es6/belt_Float.js";
import * as Caml_int32 from "./../../node_modules/rescript/lib/es6/caml_int32.js";
import * as Caml_option from "./../../node_modules/rescript/lib/es6/caml_option.js";
import * as Caml_splice_call from "./../../node_modules/rescript/lib/es6/caml_splice_call.js";

function toString(a) {
  return String(a);
}

var fromString = Belt_Float.fromString;

function toFloat(a) {
  return a;
}

function fromFloat(a) {
  return a;
}

function toInt(a) {
  return Math.round(a) | 0;
}

function fromInt(a) {
  return a;
}

function add(a, b) {
  return a + b;
}

function sub(a, b) {
  return a - b;
}

function mult(a, b) {
  return a * b;
}

function div(a, b) {
  return a / b;
}

function mod(a, n) {
  return Caml_int32.mod_(Math.round(a) | 0, Math.round(n) | 0);
}

function abs(a) {
  return Math.abs(a);
}

function ceil(a) {
  return Math.ceil(a);
}

function floor(a) {
  return Math.floor(a);
}

function round(a) {
  return Math.round(a);
}

function min(a, b) {
  return Math.min(a, b);
}

function min3(a, b, c) {
  return Math.min(a, b, c);
}

function min4(a, b, c, d) {
  return Math.min(a, b, c, d);
}

function minArr(arr) {
  return Caml_splice_call.spliceApply(Math.min, [arr]);
}

function max(a, b) {
  return Math.max(a, b);
}

function max3(a, b, c) {
  return Math.max(a, b, c);
}

function max4(a, b, c, d) {
  return Math.max(a, b, c, d);
}

function maxArr(arr) {
  return Caml_splice_call.spliceApply(Math.max, [arr]);
}

function eq(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? epsilonOpt : 1e-10;
  return Math.abs(a - b) <= epsilon;
}

function neq(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? epsilonOpt : 1e-10;
  return Math.abs(a - b) > epsilon;
}

var lt = Caml_obj.caml_lessthan;

var gt = Caml_obj.caml_greaterthan;

function lte(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? epsilonOpt : 1e-10;
  if (a < b) {
    return true;
  }
  var epsilonOpt$1 = epsilon;
  return Math.abs(a - b) <= epsilonOpt$1;
}

function gte(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? epsilonOpt : 1e-10;
  if (a > b) {
    return true;
  }
  var epsilonOpt$1 = epsilon;
  return Math.abs(a - b) <= epsilonOpt$1;
}

function sqrt(a) {
  return Math.sqrt(a);
}

function cbrt(a) {
  return Math.cbrt(a);
}

function hypot(a, b) {
  return Math.hypot(a, b);
}

function hypot3(a, b, c) {
  return Math.hypot(a, b, c);
}

function hypot4(a, b, c, d) {
  return Math.hypot(a, b, c, d);
}

function hypotArr(arr) {
  return Caml_splice_call.spliceApply(Math.hypot, [arr]);
}

function pow(base, exp) {
  return Math.pow(base, exp);
}

function powI(base, exp) {
  return Math.pow(base, exp);
}

function exp(a) {
  return Math.exp(a);
}

function ln(a) {
  return Math.log(a);
}

function log10(a) {
  return Math.log10(a);
}

function sin(a) {
  return Math.sin(a);
}

function cos(a) {
  return Math.cos(a);
}

function tan(a) {
  return Math.tan(a);
}

function asin(a) {
  return Math.asin(a);
}

function acos(a) {
  return Math.acos(a);
}

function atan(a) {
  return Math.atan(a);
}

var _PI = Math.PI;

var FloatField = {
  toString: toString,
  fromString: fromString,
  toFloat: toFloat,
  fromFloat: fromFloat,
  toInt: toInt,
  fromInt: fromInt,
  add: add,
  sub: sub,
  mult: mult,
  div: div,
  mod: mod,
  pow: pow,
  powI: powI,
  sqrt: sqrt,
  hypot: hypot,
  hypot3: hypot3,
  hypot4: hypot4,
  hypotArr: hypotArr,
  cbrt: cbrt,
  sin: sin,
  cos: cos,
  tan: tan,
  asin: asin,
  acos: acos,
  atan: atan,
  exp: exp,
  ln: ln,
  log10: log10,
  abs: abs,
  max: max,
  max3: max3,
  max4: max4,
  maxArr: maxArr,
  min: min,
  min3: min3,
  min4: min4,
  minArr: minArr,
  round: round,
  ceil: ceil,
  floor: floor,
  eq: eq,
  neq: neq,
  lt: lt,
  gt: gt,
  lte: lte,
  gte: gte,
  _NULL: 0,
  _ONE: 1,
  _PI: _PI
};

function toString$1(a) {
  return String(a);
}

var fromString$1 = Belt_Int.fromString;

function toFloat$1(a) {
  return a;
}

function fromFloat$1(a) {
  return Math.round(a) | 0;
}

function toInt$1(a) {
  return a;
}

function fromInt$1(a) {
  return a;
}

function add$1(a, b) {
  return a + b | 0;
}

function sub$1(a, b) {
  return a - b | 0;
}

function mult$1(a, b) {
  return Math.imul(a, b);
}

var div$1 = Caml_int32.div;

var mod$1 = Caml_int32.mod_;

function abs$1(a) {
  return Math.abs(a);
}

function ceil$1(a) {
  return a;
}

function floor$1(a) {
  return a;
}

function round$1(a) {
  return a;
}

function min$1(a, b) {
  return Math.min(a, b);
}

function min3$1(a, b, c) {
  return Math.min(a, b, c);
}

function min4$1(a, b, c, d) {
  return Math.min(a, b, c, d);
}

function minArr$1(arr) {
  return Caml_splice_call.spliceApply(Math.min, [arr]);
}

function max$1(a, b) {
  return Math.max(a, b);
}

function max3$1(a, b, c) {
  return Math.max(a, b, c);
}

function max4$1(a, b, c, d) {
  return Math.max(a, b, c, d);
}

function maxArr$1(arr) {
  return Caml_splice_call.spliceApply(Math.max, [arr]);
}

function eq$1(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? epsilonOpt : 0;
  return Math.abs(a - b | 0) <= epsilon;
}

function neq$1(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? epsilonOpt : 0;
  return Math.abs(a - b | 0) > epsilon;
}

var lt$1 = Caml_obj.caml_lessthan;

var gt$1 = Caml_obj.caml_greaterthan;

function lte$1(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? epsilonOpt : 0;
  if (a < b) {
    return true;
  }
  var epsilonOpt$1 = epsilon;
  return Math.abs(a - b | 0) <= epsilonOpt$1;
}

function gte$1(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? epsilonOpt : 0;
  if (a > b) {
    return true;
  }
  var epsilonOpt$1 = epsilon;
  return Math.abs(a - b | 0) <= epsilonOpt$1;
}

function sqrt$1(a) {
  return Math.round(Math.sqrt(a)) | 0;
}

function cbrt$1(a) {
  return Math.round(Math.cbrt(a)) | 0;
}

function hypot$1(a, b) {
  return Math.round(Math.hypot(a, b)) | 0;
}

function hypot3$1(a, b, c) {
  return Math.round(Math.hypot(a, b, c)) | 0;
}

function hypot4$1(a, b, c, d) {
  return Math.round(Math.hypot(a, b, c, d)) | 0;
}

function hypotArr$1(arr) {
  return Math.round(Caml_splice_call.spliceApply(Math.hypot, [arr.map(function (e) {
                        return e;
                      })])) | 0;
}

function pow$1(base, exp) {
  return Math.round(Math.pow(base, exp)) | 0;
}

function powI$1(base, exp) {
  return Math.round(Math.pow(base, exp)) | 0;
}

function exp$1(a) {
  return Math.round(Math.exp(a)) | 0;
}

function ln$1(a) {
  return Math.round(Math.log(a)) | 0;
}

function log10$1(a) {
  return Math.round(Math.log10(a)) | 0;
}

function sin$1(param) {
  return 1;
}

function cos$1(param) {
  return 1;
}

function tan$1(param) {
  return 1;
}

function asin$1(param) {
  return 0;
}

function acos$1(param) {
  return 0;
}

function atan$1(param) {
  return 0;
}

var IntegerField = {
  toString: toString$1,
  fromString: fromString$1,
  toFloat: toFloat$1,
  fromFloat: fromFloat$1,
  toInt: toInt$1,
  fromInt: fromInt$1,
  add: add$1,
  sub: sub$1,
  mult: mult$1,
  div: div$1,
  mod: mod$1,
  pow: pow$1,
  powI: powI$1,
  sqrt: sqrt$1,
  hypot: hypot$1,
  hypot3: hypot3$1,
  hypot4: hypot4$1,
  hypotArr: hypotArr$1,
  cbrt: cbrt$1,
  sin: sin$1,
  cos: cos$1,
  tan: tan$1,
  asin: asin$1,
  acos: acos$1,
  atan: atan$1,
  exp: exp$1,
  ln: ln$1,
  log10: log10$1,
  abs: abs$1,
  max: max$1,
  max3: max3$1,
  max4: max4$1,
  maxArr: maxArr$1,
  min: min$1,
  min3: min3$1,
  min4: min4$1,
  minArr: minArr$1,
  round: round$1,
  ceil: ceil$1,
  floor: floor$1,
  eq: eq$1,
  neq: neq$1,
  lt: lt$1,
  gt: gt$1,
  lte: lte$1,
  gte: gte$1,
  _NULL: 0,
  _ONE: 1,
  _PI: 3
};

function toString$2(a) {
  return a.toString();
}

function fromString$2(a) {
  return Caml_option.some(Decimal.createDecimalSt(a));
}

function toFloat$2(a) {
  return a.round().toNumber();
}

var fromFloat$2 = Decimal.createDecimal;

var toInt$2 = Decimal.toInt;

var fromInt$2 = Decimal.createDecimalI;

var _NULL = Decimal.createDecimalI(0);

var _ONE = Decimal.createDecimalI(1);

function add$2(a, b) {
  return a.add(b);
}

function sub$2(a, b) {
  return a.sub(b);
}

function mult$2(a, b) {
  return a.mul(b);
}

function div$2(a, b) {
  return a.div(b);
}

function mod$2(a, n) {
  return a.mod(n);
}

function abs$2(a) {
  return a.abs();
}

function ceil$2(a) {
  return a.ceil();
}

function floor$2(a) {
  return a.floor();
}

function round$2(a) {
  return a.round();
}

var min$2 = Decimal.min;

var min3$2 = Decimal.min3;

var min4$2 = Decimal.min4;

var minArr$2 = Decimal.minArr;

var max$2 = Decimal.max;

var max3$2 = Decimal.max3;

var max4$2 = Decimal.max4;

var maxArr$2 = Decimal.maxArr;

function eq$2(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? Caml_option.valFromOption(epsilonOpt) : _NULL;
  return a.sub(b).abs().lte(epsilon);
}

function neq$2(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? Caml_option.valFromOption(epsilonOpt) : _NULL;
  return a.sub(b).abs().gt(epsilon);
}

function lt$2(a, b) {
  return a.lt(b);
}

function gt$2(a, b) {
  return a.gt(b);
}

function lte$2(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? Caml_option.valFromOption(epsilonOpt) : _NULL;
  if (a.lt(b)) {
    return true;
  }
  var epsilonOpt$1 = Caml_option.some(epsilon);
  var epsilon$1 = Caml_option.valFromOption(epsilonOpt$1);
  return a.sub(b).abs().lte(epsilon$1);
}

function gte$2(a, b, epsilonOpt, param) {
  var epsilon = epsilonOpt !== undefined ? Caml_option.valFromOption(epsilonOpt) : _NULL;
  if (a.lt(b)) {
    return true;
  }
  var epsilonOpt$1 = Caml_option.some(epsilon);
  var epsilon$1 = Caml_option.valFromOption(epsilonOpt$1);
  return a.sub(b).abs().lte(epsilon$1);
}

function sqrt$2(a) {
  return a.sqrt();
}

function cbrt$2(a) {
  return a.cbrt();
}

var hypot$2 = Decimal.hypot;

var hypot3$2 = Decimal.hypot3;

var hypot4$2 = Decimal.hypot4;

var hypotArr$2 = Decimal.hypotArr;

function pow$2(base, exp) {
  return base.pow(exp);
}

function powI$2(base, exp) {
  return base.pow(exp);
}

function exp$2(a) {
  return a.exp();
}

function ln$2(a) {
  return a.log();
}

function log10$2(a) {
  return a.log();
}

function sin$2(a) {
  return a.sin();
}

function cos$2(a) {
  return a.cos();
}

function tan$2(a) {
  return a.tan();
}

function asin$2(a) {
  return a.asin();
}

function acos$2(a) {
  return a.acos();
}

function atan$2(a) {
  return a.atan();
}

var DecimalField = {
  toString: toString$2,
  fromString: fromString$2,
  toFloat: toFloat$2,
  fromFloat: fromFloat$2,
  toInt: toInt$2,
  fromInt: fromInt$2,
  add: add$2,
  sub: sub$2,
  mult: mult$2,
  div: div$2,
  mod: mod$2,
  pow: pow$2,
  powI: powI$2,
  sqrt: sqrt$2,
  hypot: hypot$2,
  hypot3: hypot3$2,
  hypot4: hypot4$2,
  hypotArr: hypotArr$2,
  cbrt: cbrt$2,
  sin: sin$2,
  cos: cos$2,
  tan: tan$2,
  asin: asin$2,
  acos: acos$2,
  atan: atan$2,
  exp: exp$2,
  ln: ln$2,
  log10: log10$2,
  abs: abs$2,
  max: max$2,
  max3: max3$2,
  max4: max4$2,
  maxArr: maxArr$2,
  min: min$2,
  min3: min3$2,
  min4: min4$2,
  minArr: minArr$2,
  round: round$2,
  ceil: ceil$2,
  floor: floor$2,
  eq: eq$2,
  neq: neq$2,
  lt: lt$2,
  gt: gt$2,
  lte: lte$2,
  gte: gte$2,
  _NULL: _NULL,
  _ONE: _ONE,
  _PI: Decimal._PI
};

var _EPSILON = 1e-10;

export {
  _EPSILON ,
  FloatField ,
  IntegerField ,
  DecimalField ,
  
}
/* _PI Not a pure module */
